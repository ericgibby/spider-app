{"version":3,"sources":["components/Spider/spider-00.svg","components/Spider/spider-01.svg","components/Spider/spider-02.svg","components/Spider/spider-03.svg","components/Spider/spider-04.svg","components/Spider/spider-05.svg","components/Spider/spider-06.svg","components/Spider/spider-07.svg","components/Spider/spider-08.svg","components/Spider/spider-09.svg","components/Spider/spider-10.svg","components/DifficultyPicker/DifficultyPicker.tsx","components/LetterButtons/LetterButtons.tsx","components/MaskedText/MaskedText.tsx","components/Spider/Spider.tsx","containers/PlayContainer.tsx","components/Button/Button.tsx","components/TextInput/TextInput.tsx","components/TextInputForm/TextInputForm.tsx","containers/StartContainer.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","DifficultyPicker","disabled","onChange","options","value","className","e","val","parseInt","target","map","text","key","ALPHABET","Array","fill","_","index","String","fromCharCode","LetterButtons","onClick","usedLetters","handleClick","character","letters","useMemo","getLettersMap","toUpperCase","split","selectedLetters","buttons","letter","reduce","obj","MaskedText","parts","word","characters","code","charCodeAt","join","getCharacters","part","i","arr","slice","length","IMAGES","require","Spider","step","src","alt","DIFFICULTY_OPTIONS","PlayContainer","history","useHistory","useEffect","push","useState","setUsedLetters","maxIncorrect","setMaxIncorrect","textLetters","correct","incorrect","correctCount","incorrectCount","loser","winner","Object","keys","getCurrentStep","level","to","role","aria-label","previous","Button","type","TextInput","label","onToggle","toggleText","placeholder","TextInputForm","onSubmit","setValue","visible","setVisible","preventDefault","v","StartContainer","props","App","setText","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a077677.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spider-00.232ad789.svg\";","module.exports = __webpack_public_path__ + \"static/media/spider-01.94a5fbe9.svg\";","module.exports = __webpack_public_path__ + \"static/media/spider-02.5adff19f.svg\";","module.exports = __webpack_public_path__ + \"static/media/spider-03.eae3122a.svg\";","module.exports = __webpack_public_path__ + \"static/media/spider-04.431a4e58.svg\";","module.exports = __webpack_public_path__ + \"static/media/spider-05.81454eb1.svg\";","module.exports = __webpack_public_path__ + \"static/media/spider-06.442a6ca9.svg\";","module.exports = __webpack_public_path__ + \"static/media/spider-07.cd612159.svg\";","module.exports = __webpack_public_path__ + \"static/media/spider-08.f3da2507.svg\";","module.exports = __webpack_public_path__ + \"static/media/spider-09.c0e9d028.svg\";","module.exports = __webpack_public_path__ + \"static/media/spider-10.6a37e96e.svg\";","import React, { ChangeEvent } from 'react';\n\ntype DifficultyPickerProps = {\n\tdisabled?: boolean;\n\toptions?: { text: string; value: number }[];\n\tvalue?: number;\n\tonChange?: (value: number) => void;\n};\n\nfunction DifficultyPicker({\n\tdisabled,\n\tonChange,\n\toptions,\n\tvalue\n}: DifficultyPickerProps) {\n\tconst handleChange = (e: ChangeEvent<HTMLSelectElement>) => {\n\t\tconst val = parseInt(e.target.value, 10);\n\t\tonChange?.(val);\n\t};\n\n\treturn (\n\t\t<label className=\"DifficultyPicker flex items-center\">\n\t\t\t<span className=\"hidden md:inline mr-2\">Difficulty:</span>\n\t\t\t<select\n\t\t\t\tclassName=\"px-4 py-2 border border-gray-500 rounded-md\"\n\t\t\t\tdisabled={disabled}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tvalue={value}\n\t\t\t>\n\t\t\t\t{options &&\n\t\t\t\t\toptions.map(({ text, value }) => (\n\t\t\t\t\t\t<option key={value} value={value}>\n\t\t\t\t\t\t\t{text}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t))}\n\t\t\t</select>\n\t\t</label>\n\t);\n}\n\nexport default DifficultyPicker;\n","import React, { SyntheticEvent, useMemo } from 'react';\n\n// Generate array with all letters of the alphabet\nconst ALPHABET = new Array(26)\n\t.fill('')\n\t.map((_, index) => String.fromCharCode(65 + index));\n\ntype LetterButtonsProps = {\n\tdisabled?: boolean;\n\ttext?: string;\n\tusedLetters?: string[];\n\tonClick?: (letter: string) => void;\n};\n\nfunction LetterButtons({\n\tdisabled,\n\tonClick,\n\ttext,\n\tusedLetters\n}: LetterButtonsProps) {\n\tconst handleClick = (e: SyntheticEvent) => {\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tconst character = (e.target as any).value;\n\t\tonClick?.(character);\n\t};\n\n\t// Create map objects of letters in `text` and `usedLetters`\n\tconst letters = useMemo(\n\t\t() => getLettersMap((text || '').toUpperCase().split('')),\n\t\t[text]\n\t);\n\tconst selectedLetters = useMemo(() => getLettersMap(usedLetters), [\n\t\tusedLetters\n\t]);\n\n\tconst buttons = ALPHABET.map(letter => (\n\t\t<button\n\t\t\tkey={letter}\n\t\t\tclassName={`h-12 w-12 m-1 rounded-md focus:outline-none text-white border${\n\t\t\t\tselectedLetters[letter] && !letters[letter]\n\t\t\t\t\t? ' bg-red-600 border-red-700 hover:bg-red-700 hover:border-red-800'\n\t\t\t\t\t: ' bg-blue-600 border-blue-700 hover:bg-blue-700 hover:border-blue-800'\n\t\t\t}${\n\t\t\t\tselectedLetters[letter] || disabled\n\t\t\t\t\t? ' opacity-25 cursor-not-allowed'\n\t\t\t\t\t: ''\n\t\t\t}`}\n\t\t\tvalue={letter}\n\t\t\tonClick={handleClick}\n\t\t\tdisabled={!!selectedLetters[letter] || disabled}\n\t\t>\n\t\t\t{letter}\n\t\t</button>\n\t));\n\n\treturn <div className=\"LetterButtons\">{buttons}</div>;\n}\n\nexport default LetterButtons;\n\nfunction getLettersMap(letters: string[] = []) {\n\treturn letters.reduce(\n\t\t(obj, letter) => ({ ...obj, [letter]: true }),\n\t\t{} as { [key: string]: boolean }\n\t);\n}\n","import React, { useMemo } from 'react';\n\ntype MaskedTextProps = {\n\ttext?: string;\n\tusedLetters?: string[];\n};\n\nfunction MaskedText({ text, usedLetters }: MaskedTextProps) {\n\tconst words = useMemo(() => getCharacters(text, usedLetters).split(' '), [\n\t\ttext,\n\t\tusedLetters\n\t]);\n\tconst parts = words\n\t\t.map((part, index) => {\n\t\t\tconst letters = part.split('').map((letter, i) => (\n\t\t\t\t<span\n\t\t\t\t\tkey={`Letter-${i}`}\n\t\t\t\t\tclassName=\"inline-block my-0 ml-0 mr-2\"\n\t\t\t\t>\n\t\t\t\t\t{letter}\n\t\t\t\t</span>\n\t\t\t));\n\t\t\treturn (\n\t\t\t\t<span key={`Word-${index}`} className=\"whitespace-no-wrap\">\n\t\t\t\t\t{letters}\n\t\t\t\t</span>\n\t\t\t);\n\t\t})\n\t\t.reduce(\n\t\t\t(arr, part, index) => [\n\t\t\t\t...arr,\n\t\t\t\tpart,\n\t\t\t\t<span key={`Space-${index}`}>&nbsp;</span>\n\t\t\t],\n\t\t\t[] as JSX.Element[]\n\t\t)\n\t\t.slice(0, -1); // Remove trailing space\n\n\treturn parts.length ? (\n\t\t<div className=\"MaskedText text-4xl md:text-6xl\">{parts}</div>\n\t) : null;\n}\n\nexport default MaskedText;\n\nexport function getCharacters(word: string = '', letters: string[] = []) {\n\t// Convert array to map for faster lookup\n\tconst usedLetters = letters.reduce(\n\t\t(obj, letter) => ({ ...obj, [letter]: true }),\n\t\t{} as { [key: string]: boolean }\n\t);\n\tconst characters = word\n\t\t.toUpperCase()\n\t\t.split('')\n\t\t.map(letter => {\n\t\t\t// Only mask letters between 65-90 (A-Z)\n\t\t\tconst code = letter.charCodeAt(0);\n\t\t\tif (code >= 65 && code <= 90) {\n\t\t\t\treturn usedLetters[letter] ? letter : '_';\n\t\t\t}\n\t\t\treturn letter;\n\t\t});\n\treturn characters.join('');\n}\n","import React from 'react';\n\nconst IMAGES = [\n\trequire('./spider-00.svg'),\n\trequire('./spider-01.svg'),\n\trequire('./spider-02.svg'),\n\trequire('./spider-03.svg'),\n\trequire('./spider-04.svg'),\n\trequire('./spider-05.svg'),\n\trequire('./spider-06.svg'),\n\trequire('./spider-07.svg'),\n\trequire('./spider-08.svg'),\n\trequire('./spider-09.svg'),\n\trequire('./spider-10.svg')\n];\n\ntype SpiderProps = {\n\tstep?: number;\n};\n\nfunction Spider({ step = 0 }: SpiderProps) {\n\tconst src =\n\t\tstep >= IMAGES.length ? IMAGES[IMAGES.length - 1] : IMAGES[step];\n\treturn (\n\t\t<div className=\"Spider\">\n\t\t\t<img alt=\"Spider\" src={src} />\n\t\t</div>\n\t);\n}\n\nexport default Spider;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport DifficultyPicker from '../components/DifficultyPicker/DifficultyPicker';\nimport LetterButtons from '../components/LetterButtons/LetterButtons';\nimport MaskedText from '../components/MaskedText/MaskedText';\nimport Spider from '../components/Spider/Spider';\n\nconst DEFAULT_MAX_INCORRECT = 10;\n\nconst DIFFICULTY_OPTIONS = [\n\t{ text: 'Easy', value: 10 },\n\t{ text: 'Medium', value: 6 },\n\t{ text: 'Hard', value: 4 }\n];\n\ntype PlayContainerProps = {\n\ttext?: string;\n};\n\nfunction PlayContainer({ text }: PlayContainerProps) {\n\tconst history = useHistory();\n\n\tuseEffect(() => {\n\t\tif (!text) {\n\t\t\thistory.push('/start');\n\t\t}\n\t}, [history, text]);\n\n\tconst [usedLetters, setUsedLetters] = useState<string[]>([]);\n\tconst [maxIncorrect, setMaxIncorrect] = useState(DEFAULT_MAX_INCORRECT);\n\n\tconst textLetters = useMemo(\n\t\t() =>\n\t\t\t(text || '')\n\t\t\t\t.split('')\n\t\t\t\t.reduce(\n\t\t\t\t\t(obj, letter) => ({ ...obj, [letter]: true }),\n\t\t\t\t\t{} as { [letter: string]: boolean }\n\t\t\t\t),\n\t\t[text]\n\t);\n\n\tconst [correctCount, incorrectCount] = useMemo(\n\t\t() =>\n\t\t\tusedLetters.reduce(\n\t\t\t\t([correct, incorrect], letter) =>\n\t\t\t\t\ttextLetters[letter]\n\t\t\t\t\t\t? [correct + 1, incorrect]\n\t\t\t\t\t\t: [correct, incorrect + 1],\n\t\t\t\t[0, 0]\n\t\t\t),\n\t\t[textLetters, usedLetters]\n\t);\n\n\tconst loser = incorrectCount === maxIncorrect;\n\tconst winner = correctCount === Object.keys(textLetters).length;\n\tconst step = getCurrentStep(incorrectCount, maxIncorrect);\n\n\tconst handleChange = (level: number) => {\n\t\tsetMaxIncorrect(level);\n\t};\n\n\tconst handleClick = (letter: string) => {\n\t\tsetUsedLetters(previous => [...previous, letter]);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n\t\t\t\t<DifficultyPicker\n\t\t\t\t\tdisabled={usedLetters.length > 0}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\toptions={DIFFICULTY_OPTIONS}\n\t\t\t\t\tvalue={maxIncorrect}\n\t\t\t\t/>\n\t\t\t\t<div className=\"mt-2 md:mt-0\">\n\t\t\t\t\t<Link\n\t\t\t\t\t\tclassName=\"px-4 py-2 border border-blue-700 hover:border-blue-800 rounded-md text-blue-700 hover:text-blue-800\"\n\t\t\t\t\t\tto=\"/start\"\n\t\t\t\t\t>\n\t\t\t\t\t\tStart Over\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{loser && (\n\t\t\t\t<div className=\"mt-4 p-6 bg-red-200 border border-red-500 rounded-md\">\n\t\t\t\t\tSorry. You lost.{' '}\n\t\t\t\t\t<span role=\"img\" aria-label=\"sad emoji\">\n\t\t\t\t\t\t😢\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t{winner && (\n\t\t\t\t<div className=\"mt-4 p-6 bg-blue-200 border border-blue-500 rounded-md\">\n\t\t\t\t\tCongratulations! You won!{' '}\n\t\t\t\t\t<span role=\"img\" aria-label=\"smiley emoji\">\n\t\t\t\t\t\t😁\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<div className=\"mb-6 py-4 border-b border-gray-500 text-center\">\n\t\t\t\t<MaskedText text={text} usedLetters={usedLetters} />\n\t\t\t</div>\n\t\t\t<div className=\"grid gap-6 grid-cols-1 md:grid-cols-2\">\n\t\t\t\t<Spider step={step} />\n\t\t\t\t<LetterButtons\n\t\t\t\t\tdisabled={winner || loser}\n\t\t\t\t\tonClick={handleClick}\n\t\t\t\t\ttext={text}\n\t\t\t\t\tusedLetters={usedLetters}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default PlayContainer;\n\nfunction getCurrentStep(incorrectCount: number, maxIncorrect: number) {\n\tif (incorrectCount <= 2) {\n\t\treturn incorrectCount;\n\t}\n\tif (maxIncorrect === 6) {\n\t\treturn [4, 6, 8, 10][incorrectCount - 3];\n\t}\n\tif (maxIncorrect === 4) {\n\t\treturn [6, 10][incorrectCount - 3];\n\t}\n\treturn incorrectCount;\n}\n","import React, { SyntheticEvent } from 'react';\n\ntype ButtonProps = {\n\ttext: string;\n\ttype?: 'button' | 'submit';\n\tonClick?: (e: SyntheticEvent) => void;\n};\n\nfunction Button({ onClick, text, type = 'button' }: ButtonProps) {\n\treturn (\n\t\t<button\n\t\t\tclassName=\"px-4 py-2 bg-blue-600 border border-blue-700 text-white hover:bg-blue-700 hover:border-blue-800 rounded-md focus:shadow-outline\"\n\t\t\tonClick={onClick}\n\t\t\ttype={type}\n\t\t>\n\t\t\t{text}\n\t\t</button>\n\t);\n}\n\nexport default Button;\n","import React, { ChangeEvent, SyntheticEvent } from 'react';\n\ntype TextInputProps = {\n\tlabel?: string;\n\ttoggleText?: string;\n\ttype?: 'number' | 'password' | 'text';\n\tvalue?: string;\n\tonChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n\tonToggle?: (e: SyntheticEvent) => void;\n};\n\nfunction TextInput({\n\tlabel,\n\tonChange,\n\tonToggle,\n\ttoggleText,\n\ttype = 'text',\n\tvalue\n}: TextInputProps) {\n\treturn (\n\t\t<label className=\"TextInput flex items-center px-4 py-2 border border-gray-500 rounded-md \">\n\t\t\t{label && <span className=\"sr-only\">{label}</span>}\n\t\t\t<input\n\t\t\t\tclassName=\"flex-1 focus:outline-none\"\n\t\t\t\tonChange={onChange}\n\t\t\t\tplaceholder={label}\n\t\t\t\ttype={type}\n\t\t\t\tvalue={value}\n\t\t\t/>\n\t\t\t{toggleText && (\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"flex-initial ml-2 text-blue-400 hover:text-blue-500 uppercase text-sm focus:outline-none\"\n\t\t\t\t\tonClick={onToggle}\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t>\n\t\t\t\t\t{toggleText}\n\t\t\t\t</button>\n\t\t\t)}\n\t\t</label>\n\t);\n}\n\nexport default TextInput;\n","import React, { ChangeEvent, FormEvent, SyntheticEvent, useState } from 'react';\nimport Button from '../Button/Button';\nimport TextInput from '../TextInput/TextInput';\n\nexport type TextInputFormProps = {\n\tonSubmit?: (text: string) => void;\n};\n\nfunction TextInputForm({ onSubmit }: TextInputFormProps) {\n\tconst [value, setValue] = useState('');\n\tconst [visible, setVisible] = useState(false);\n\n\tconst handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tconst value = e.target.value || '';\n\t\tsetValue(value);\n\t};\n\n\tconst handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n\t\te.preventDefault();\n\t\tonSubmit?.(value);\n\t};\n\n\tconst handleToggle = (e: SyntheticEvent) => {\n\t\te.preventDefault();\n\t\tsetVisible(v => !v);\n\t};\n\n\treturn (\n\t\t<form className=\"flex\" onSubmit={handleSubmit}>\n\t\t\t<div className=\"flex-1 mr-2\">\n\t\t\t\t<TextInput\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tonToggle={handleToggle}\n\t\t\t\t\tlabel=\"Enter a word or phrase\"\n\t\t\t\t\ttoggleText={visible ? 'hide' : 'show'}\n\t\t\t\t\ttype={visible ? 'text' : 'password'}\n\t\t\t\t\tvalue={value}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"flex-initial\">\n\t\t\t\t<Button text=\"OK\" type=\"submit\" />\n\t\t\t</div>\n\t\t</form>\n\t);\n}\n\nexport default TextInputForm;\n","import React from 'react';\nimport TextInputForm, {\n\tTextInputFormProps\n} from '../components/TextInputForm/TextInputForm';\n\nfunction StartContainer(props: TextInputFormProps) {\n\treturn (\n\t\t<>\n\t\t\t<p className=\"mb-2\">\n\t\t\t\tEnter a word or phrase for other players to guess.\n\t\t\t</p>\n\t\t\t<TextInputForm {...props} />\n\t\t</>\n\t);\n}\n\nexport default StartContainer;\n","import React, { useState } from 'react';\nimport { Redirect, Route, Switch, useHistory } from 'react-router-dom';\nimport PlayContainer from './containers/PlayContainer';\nimport StartContainer from './containers/StartContainer';\n\nfunction App() {\n\tconst history = useHistory();\n\n\tconst [text, setText] = useState('');\n\n\tconst handleSubmit = (value: string) => {\n\t\tsetText(value.toUpperCase());\n\t\thistory.push('/play');\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"py-6 bg-blue-600 text-white\">\n\t\t\t\t<h1 className=\"container px-2 mx-auto text-5xl\">Spider</h1>\n\t\t\t</header>\n\t\t\t<div className=\"container px-2 my-8 mx-auto\">\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/start\">\n\t\t\t\t\t\t<StartContainer onSubmit={handleSubmit} />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/play\">\n\t\t\t\t\t\t<PlayContainer text={text} />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Redirect path=\"*\" to=\"/start\" />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://cra.link/PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://cra.link/PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null &&\n\t\t\t\t\tcontentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<BrowserRouter>\n\t\t\t<App />\n\t\t</BrowserRouter>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}